from aiogram import F, Router
from ..media_shared import MediaForm, valid_statuses, get_user_media
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()


@router.message(MediaForm.waiting_for_anime_action, F.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–Ω—ñ–º–µ üóÇ")
async def show_anime_list(message: Message, state: FSMContext):
    user_id = message.from_user.id if message.from_user is not None else None
    media_list = await get_user_media(user_id)
    if not media_list:
        await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∞–Ω—ñ–º–µ.")
        return

    # –§–æ—Ä–º—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é —Ç–∞ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è–º
    table = "<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –∞–Ω—ñ–º–µ:</b>\n\n"
    table += f"<pre>{'‚Ññ':<2} {'–ù–∞–∑–≤–∞':<22} {'–°—Ç–∞—Ç—É—Å':<11} {'–°–µ—Ä—ñ—è':<3}\n"
    table += "-" * 41 + "\n"
    for idx, media in enumerate(media_list, 1):
        table += f"{idx:<2} {media['title'][:22]:<22} {media['status']:<11} {str(media['current_episode']):<3}\n"
    table += "</pre>"
    await message.answer(table, parse_mode="HTML")

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(
            text=status)] for status in valid_statuses] + [[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("–ë–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω—ñ–º–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º? –û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)
    await state.set_state(MediaForm.waiting_for_filter_status)


@router.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º")
async def choose_status(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(
            text=status)] for status in valid_statuses] + [[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", reply_markup=keyboard)
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω!
    await state.set_state(MediaForm.waiting_for_filter_status)


@router.message(MediaForm.waiting_for_filter_status)
async def show_by_status(message: Message, state: FSMContext):
    if message.text not in valid_statuses:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return
    user_id = message.from_user.id if message.from_user is not None else None
    media_list = await get_user_media(user_id)
    filtered = [m for m in media_list if m["status"] == message.text]
    if not filtered:
        await message.answer("–ù–µ–º–∞—î –∞–Ω—ñ–º–µ –∑ —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
        await state.clear()
        return
    table = "<b>–í–∞—à—ñ –∞–Ω—ñ–º–µ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º:</b>\n\n"
    table += f"<pre>{'‚Ññ':<3} {'–ù–∞–∑–≤–∞':<22} {'–°–µ—Ä—ñ—è':<5}\n"
    table += "-" * 32 + "\n"
    for idx, media in enumerate(filtered, 1):
        table += f"{idx:<3} {media['title'][:20]:<22} {str(media['current_episode']):<5}\n"
    table += "</pre>"
    await message.answer(table, parse_mode="HTML", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    ))
    await state.clear()
